# ============================================================================
# apps/endpoints/services.py - Endpoint business logic
# ============================================================================

import json
import logging
from typing import List, Optional
from sqlalchemy.orm import Session
from fastapi import HTTPException

from .models import EndpointModel
from .schemas import Endpoint, EndpointCreate, EndpointUpdate
from shared.utils import create_backup, execute_asterisk_command
from config import ASTERISK_PJSIP_CONFIG

logger = logging.getLogger(__name__)

class EndpointService:
    """Service for managing PJSIP endpoints"""
    
    @staticmethod
    def create_endpoint(db: Session, endpoint_data: EndpointCreate) -> EndpointModel:
        """Create a new endpoint"""
        # Check if endpoint already exists
        existing = db.query(EndpointModel).filter(EndpointModel.id == endpoint_data.id).first()
        if existing:
            raise HTTPException(status_code=400, detail="Endpoint already exists")
        
        # Create new endpoint
        endpoint = EndpointModel(
            id=endpoint_data.id,
            username=endpoint_data.username,
            password=endpoint_data.password,
            context=endpoint_data.context,
            codecs=json.dumps(endpoint_data.codecs),
            max_contacts=endpoint_data.max_contacts,
            callerid=endpoint_data.callerid
        )
        
        db.add(endpoint)
        db.commit()
        db.refresh(endpoint)
        
        # Regenerate config
        EndpointService.regenerate_config(db)
        
        return endpoint
    
    @staticmethod
    def get_endpoints(db: Session) -> List[EndpointModel]:
        """Get all endpoints"""
        return db.query(EndpointModel).all()
    
    @staticmethod
    def get_endpoint(db: Session, endpoint_id: str) -> Optional[EndpointModel]:
        """Get endpoint by ID"""
        return db.query(EndpointModel).filter(EndpointModel.id == endpoint_id).first()
    
    @staticmethod
    def update_endpoint(db: Session, endpoint_id: str, endpoint_data: EndpointUpdate) -> EndpointModel:
        """Update an endpoint"""
        endpoint = EndpointService.get_endpoint(db, endpoint_id)
        if not endpoint:
            raise HTTPException(status_code=404, detail="Endpoint not found")
        
        for field, value in endpoint_data.dict(exclude_unset=True).items():
            if field == "codecs":
                value = json.dumps(value)
            setattr(endpoint, field, value)
        
        db.commit()
        db.refresh(endpoint)
        
        # Regenerate config
        EndpointService.regenerate_config(db)
        
        return endpoint
    
    @staticmethod
    def delete_endpoint(db: Session, endpoint_id: str) -> bool:
        """Delete an endpoint"""
        endpoint = EndpointService.get_endpoint(db, endpoint_id)
        if not endpoint:
            raise HTTPException(status_code=404, detail="Endpoint not found")
        
        db.delete(endpoint)
        db.commit()
        
        # Regenerate config
        EndpointService.regenerate_config(db)
        
        return True
    
    @staticmethod
    def regenerate_config(db: Session) -> str:
        """Generate and save PJSIP configuration"""
        endpoints = EndpointService.get_endpoints(db)
        config_content = EndpointService.generate_config_content(endpoints)
        
        # Create backup
        create_backup(ASTERISK_PJSIP_CONFIG, "pjsip")
        
        # Write new config
        with open(ASTERISK_PJSIP_CONFIG, 'w') as f:
            f.write(config_content)
        
        logger.info("PJSIP configuration regenerated")
        return config_content
    
    @staticmethod
    def generate_config_content(endpoints: List[EndpointModel]) -> str:
        """Generate PJSIP configuration content"""
        from datetime import datetime
        
        config_lines = [
            "; PJSIP Configuration",
            "; Generated by Asterisk Management Platform",
            f"; Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
        ]
        
        for endpoint in endpoints:
            codecs = json.loads(endpoint.codecs) if endpoint.codecs else ["ulaw", "alaw"]
            
            # Endpoint section
            config_lines.extend([
                f"[{endpoint.id}]",
                "type=endpoint",
                f"context={endpoint.context}",
                "disallow=all",
                f"allow={','.join(codecs)}",
                f"auth={endpoint.id}_auth",
                f"aors={endpoint.id}_aor",
            ])
            
            if endpoint.callerid:
                config_lines.append(f"callerid={endpoint.callerid}")
            
            config_lines.append("")
            
            # Auth section
            config_lines.extend([
                f"[{endpoint.id}_auth]",
                "type=auth",
                "auth_type=userpass",
                f"username={endpoint.username}",
                f"password={endpoint.password}",
                "",
            ])
            
            # AOR section
            config_lines.extend([
                f"[{endpoint.id}_aor]",
                "type=aor",
                f"max_contacts={endpoint.max_contacts}",
                "",
            ])
        
        return "\n".join(config_lines)
    
    @staticmethod
    def reload_pjsip() -> tuple[bool, str]:
        """Reload PJSIP configuration in Asterisk"""
        return execute_asterisk_command("pjsip reload")
