# ============================================================================
# apps/endpoints/services.py - Simplified without database for now
# ============================================================================

import logging
from typing import List
from datetime import datetime

from .schemas import Endpoint, EndpointCreate
from shared.utils import create_backup, execute_asterisk_command
from config import ASTERISK_PJSIP_CONFIG

logger = logging.getLogger(__name__)

class EndpointService:
    """Service for managing PJSIP endpoints"""
    
    @staticmethod
    def generate_config_content(endpoints: List[Endpoint]) -> str:
        """Generate PJSIP configuration content"""
        config_lines = [
            "; PJSIP Configuration",
            "; Generated by Asterisk Management Platform",
            f"; Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
        ]
        
        for endpoint in endpoints:
            # Endpoint section
            config_lines.extend([
                f"[{endpoint.id}]",
                "type=endpoint",
                f"context={endpoint.context}",
                "disallow=all",
                f"allow={','.join(endpoint.codecs)}",
                f"auth={endpoint.id}_auth",
                f"aors={endpoint.id}_aor",
            ])
            
            if endpoint.callerid:
                config_lines.append(f"callerid={endpoint.callerid}")
            
            config_lines.append("")
            
            # Auth section
            config_lines.extend([
                f"[{endpoint.id}_auth]",
                "type=auth",
                "auth_type=userpass",
                f"username={endpoint.username}",
                f"password={endpoint.password}",
                "",
            ])
            
            # AOR section
            config_lines.extend([
                f"[{endpoint.id}_aor]",
                "type=aor",
                f"max_contacts={endpoint.max_contacts}",
                "",
            ])
        
        return "\n".join(config_lines)
    
    @staticmethod
    def save_config(endpoints: List[Endpoint]) -> str:
        """Generate and save PJSIP configuration"""
        config_content = EndpointService.generate_config_content(endpoints)
        
        # Create backup
        create_backup(ASTERISK_PJSIP_CONFIG, "pjsip")
        
        # Write new config
        with open(ASTERISK_PJSIP_CONFIG, 'w') as f:
            f.write(config_content)
        
        logger.info("PJSIP configuration saved")
        return config_content
    
    @staticmethod
    def get_current_config() -> str:
        """Get current PJSIP configuration"""
        try:
            if os.path.exists(ASTERISK_PJSIP_CONFIG):
                with open(ASTERISK_PJSIP_CONFIG, 'r') as f:
                    return f.read()
            else:
                return "; No configuration file found"
        except Exception as e:
            logger.error(f"Failed to read config: {e}")
            return f"; Error reading config: {e}"
    
    @staticmethod
    def reload_pjsip() -> tuple[bool, str]:
        """Reload PJSIP configuration in Asterisk"""
        return execute_asterisk_command("pjsip reload")